Perfect — since you want a complete developer-oriented description, here’s a full technical specification document that your team (or you) can hand over to begin actual implementation.

It’s written in a developer documentation format — covering architecture, stack, directory structure, integrations, feature modules, database schema, API endpoints, CMS setup, and deployment flow.

⸻

🌙 Project Specification: Comprehensive Islamic Portal

Project Name: The Islamic Compass (placeholder – rename as you wish)

Objective:
A modern, authentic, and feature-rich Islamic web platform combining all aspects of Islamic life — Quran, Hadith, daily habits, Islamic finance, politics, culture, brotherhood, and global events — built with verified sources and intelligent functionality.

⸻

🏗️ 1. System Architecture Overview

Type: Full-stack web application (Jamstack + Headless CMS)
Frontend: Next.js (React Framework)
Backend: Node.js with Strapi (Headless CMS)
Database: PostgreSQL
Storage: AWS S3 (or Cloudinary) for media assets
Search Engine: ElasticSearch / Algolia
Caching: Redis
Authentication: JWT + OAuth2 + optional 2FA
Hosting:
	•	Frontend → Vercel or Netlify
	•	Backend → Render / AWS / DigitalOcean
	•	Database → Supabase / Railway / PlanetScale

Architecture Pattern:
	•	Modular monorepo (TurboRepo or Nx recommended)
	•	API-driven design (all data via REST or GraphQL)
	•	SSR/SSG for SEO & performance
	•	CDN caching for static assets and Quranic content

⸻

🧱 2. Directory Structure

islamic-portal/
│
├── apps/
│   ├── frontend/             # Next.js application
│   │   ├── components/       # Reusable UI components
│   │   ├── pages/            # Routes (Next.js pages)
│   │   ├── public/           # Static assets (images, icons)
│   │   ├── styles/           # Global CSS/Tailwind config
│   │   └── utils/            # Frontend helpers
│   │
│   └── backend/              # Strapi CMS + custom APIs
│       ├── api/              # Custom routes/controllers
│       ├── config/           # Strapi configs (db, auth, plugins)
│       ├── extensions/       # Plugins or overrides
│       └── uploads/          # Media folder (S3/Cloudinary)
│
├── packages/
│   ├── ui/                   # Shared UI library
│   ├── hooks/                # Custom React hooks
│   └── utils/                # Shared utilities
│
├── docs/                     # Developer docs
└── scripts/                  # Deployment and setup scripts


⸻

⚙️ 3. Technology Stack

Layer	Technology	Purpose
Frontend	Next.js + React 19	SEO-friendly, SSR & SSG
Styling	Tailwind CSS + Framer Motion	Modern, responsive design
Backend	Node.js + Strapi CMS	Manage Quran, Hadith, articles, users
Database	PostgreSQL	Relational DB for structured data
Auth	JWT + Passport.js	Secure authentication
Search	ElasticSearch / Algolia	Advanced text search
Caching	Redis	Faster API response for repeated queries
Storage	AWS S3 / Cloudinary	Store Quran audio, PDFs, images
Analytics	Google Analytics 4 / Plausible	User insights
DevOps	Docker + GitHub Actions	CI/CD pipelines


⸻

🔑 4. Core Functional Modules

4.1 Quran Module

Features:
	•	Arabic text with translations (multi-language)
	•	Tafsir (Ibn Kathir, Jalalayn, etc.)
	•	Audio recitations
	•	Word-by-word translation
	•	Verse comparison
	•	Bookmark & notes per user
	•	API endpoint for verse retrieval

Endpoints:

GET /api/quran/surah/:id
GET /api/quran/verse/:surah/:ayah
GET /api/quran/search?q={query}
POST /api/quran/bookmark

Database Entities:
	•	Surah(id, name, revelation_place, total_ayahs)
	•	Ayah(id, surah_id, text_ar, translation_en, tafsir_id, audio_url)
	•	Tafsir(id, name, source, text, scholar_id)
	•	Bookmark(id, user_id, ayah_id, note)

⸻

4.2 Hadith Module

Features:
	•	Search by keyword, book, narrator, authenticity
	•	Full isnad + translation
	•	Grade labels (Sahih, Daif, Hasan)
	•	Scholar commentary
	•	Linked tafsir references

Endpoints:

GET /api/hadith/book/:name
GET /api/hadith/:id
GET /api/hadith/search?q={keyword}

Database Entities:
	•	Hadith(id, book, chapter, text_ar, translation_en, grade, narrator, source_url)
	•	Commentary(id, hadith_id, scholar_id, text)
	•	Scholar(id, name, bio, verified)

⸻

4.3 Islamic Finance Module

Features:
	•	Zakat calculator
	•	Halal/Haram investment guides
	•	Fatwa-based financial rules
	•	Islamic fintech news

Endpoints:

GET /api/finance/zakat?assets={amount}
GET /api/finance/articles
GET /api/finance/fatwa/:id

Entities:
	•	FinanceArticle(id, title, content, category, sources)
	•	Fatwa(id, scholar_id, question, answer, reference)

⸻

4.4 Daily Life / Habits Module

Features:
	•	Prayer times (geo-detected)
	•	Duas (morning/evening)
	•	Habit tracker (fasting, Quran reading)
	•	Islamic calendar (Hijri)

Integrations:
	•	Prayer Times API (Aladhan or custom)
	•	LocalStorage / DB sync for user habits

Entities:
	•	Habit(id, user_id, type, progress)
	•	Dua(id, category, text_ar, translation, reference)
	•	PrayerTime(id, location, fajr, dhuhr, asr, maghrib, isha)

⸻

4.5 Politics, Events & Diaspora Module

Features:
	•	News aggregation (RSS + manual submissions)
	•	Global Islamic events calendar
	•	Map view for mosques & communities
	•	Submit your local event

Endpoints:

GET /api/events
POST /api/events/submit
GET /api/politics/news

Entities:
	•	Event(id, title, date, location, organizer, verified)
	•	News(id, title, category, summary, url)

⸻

4.6 Community / Brotherhood Module

Features:
	•	User profiles & groups
	•	Forums / discussions
	•	Scholar verification badges
	•	Mentorship system

Entities:
	•	User(id, name, email, role, verified_scholar)
	•	Group(id, name, description, members[])
	•	Post(id, group_id, author_id, content, created_at)

⸻

🛠️ 5. CMS Setup (Strapi)

Collections:
	•	Quran
	•	Hadith
	•	Finance
	•	Dua
	•	Events
	•	Articles
	•	Scholars
	•	Users

Roles:
	•	Admin: Full access
	•	Scholar: Can approve content
	•	Author: Submit content, cannot publish
	•	User: Read-only

Plugins:
	•	strapi-plugin-i18n (multi-language)
	•	strapi-plugin-users-permissions
	•	strapi-plugin-upload (S3)
	•	strapi-plugin-seo
	•	strapi-plugin-documentation

⸻

🌐 6. Frontend Pages & Routes

Route	Description
/	Homepage – hero, featured surahs, articles, events
/quran	Quran reader main page
/quran/[surah]	Surah view
/hadith	Hadith list & search
/finance	Islamic finance articles & calculators
/daily	Daily Islamic habits, duas, prayer times
/events	Global Islamic events calendar
/community	Forums, mentors, verified scholars
/resources	Books, PDFs, lectures
/login, /signup	Authentication routes


⸻

🔐 7. Authentication Flow
	1.	User registers (email, password, optional scholar verification doc).
	2.	JWT issued on login.
	3.	Access control via middleware (role: scholar, role: admin).
	4.	Optional 2FA with email OTP or authenticator app.

⸻

🧮 8. API Design (Summary)

Method	Endpoint	Description
GET	/api/quran/surah/:id	Fetch surah + ayahs
GET	/api/quran/verse/:surah/:ayah	Fetch specific verse
GET	/api/hadith/search?q=	Search hadith text
POST	/api/user/bookmark	Bookmark ayah
GET	/api/prayers/times?lat&lon	Prayer time calculation
POST	/api/community/post	Create new forum post


⸻

💾 9. Database Schema (Simplified ERD)

User ──< Bookmark >── Ayah
User ──< Post >── Group
Surah ──< Ayah >── Tafsir
Hadith ──< Commentary >── Scholar
Scholar ──< Fatwa
Event ──< Organizer


⸻

🧠 10. AI / Automation Integrations (Optional Later)
	•	AI Quran Search: semantic search across verses.
	•	AI Chatbot: Ask-Islam bot (Q&A referencing Quran/Hadith only).
	•	AI Voice Assistant: read verse aloud or answer “Where is this ayah?”
	•	Automatic Tafsir summarization using free LLM APIs (e.g., HuggingFace).

⸻

🚀 11. Deployment Plan
	1.	Initialize repo → GitHub
	2.	Setup Strapi backend → connect PostgreSQL
	3.	Deploy backend on Render or Railway
	4.	Setup Next.js frontend → connect via REST/GraphQL
	5.	Configure environment variables:

DATABASE_URL=
JWT_SECRET=
CLOUDINARY_KEY=
ALGOLIA_API_KEY=


	6.	Deploy frontend → Vercel/Netlify
	7.	Set up CI/CD → GitHub Actions for auto-deploy
	8.	Configure HTTPS and CORS policies

⸻

🔒 12. Security & Compliance
	•	HTTPS + CSP headers
	•	Sanitization of user inputs
	•	Content moderation for user posts
	•	Rate limiting on search endpoints
	•	GDPR/CCPA compliant privacy policy

⸻

💰 13. Monetization Options
	•	Donations (Stripe, PayPal)
	•	Premium content subscription
	•	Sponsored Islamic courses / Halal businesses
	•	API access subscription for developers

⸻

🕰️ 14. MVP Roadmap

Phase	Deliverables	Duration
Phase 1	Setup, Auth, CMS, Quran module	4 weeks
Phase 2	Hadith, Daily Habits, Finance	6 weeks
Phase 3	Community, Events, AI search	8 weeks
Phase 4	Production deployment, QA	2 weeks


⸻

✅ 15. Deliverables for Developers
	•	Functional web app (frontend + backend)
	•	CMS panel for admins/scholars
	•	Full API documentation (Swagger/OpenAPI)
	•	Role-based access control
	•	SEO-optimized, mobile-first UI
	•	Integration tests + CI/CD pipelines

⸻

Would you like me to now generate the actual starter code (Next.js + Strapi + Tailwind + Postgres structure) so you or your developers can immediately start building this?
I can provide the Git-ready boilerplate and .env setup guide next.