Perfect ‚Äî here‚Äôs a developer-friendly task brief version of what you described. It‚Äôs written clearly, structured, and action-oriented so your developer can understand exactly what needs to be done:

‚∏ª

üïå ISLAMIC WEBSITE FUNCTIONAL & TECHNICAL TASK BRIEF

üéØ Objective

Create an intelligent, user-personalized Islamic knowledge platform that:
	‚Ä¢	Provides dynamic recommendations (Duas, Hadith, Quranic verses) based on user behavior and emotional state (e.g., stress, sickness, sadness, etc.)
	‚Ä¢	Offers categorized, searchable Islamic resources (Hadith books, Duas, Ruqyah, etc.)
	‚Ä¢	Supports audio playback, filters, and personalized experiences based on user consent.

‚∏ª

üß† Core Features

1. User Behavior‚ÄìBased Recommendation System
	‚Ä¢	Analyze YouTube or browsing history (only if user explicitly consents).
	‚Ä¢	Based on detected emotion or topic (e.g., stress, sickness, sadness, happiness, death, exams, etc.), recommend:
	‚Ä¢	Relevant Duas
	‚Ä¢	Quranic verses (with translation)
	‚Ä¢	Hadiths related to that situation
	‚Ä¢	Example:
	‚Ä¢	If the user watches ‚Äúoverthinking/stress relief‚Äù videos ‚Üí Show Duas for stress relief, Ayahs on Sabr (patience), Hadiths on calmness.
	‚Ä¢	If ‚Äúsickness‚Äù videos ‚Üí Duas for Shifa, verses on healing, Hadiths about illness.

‚∏ª

2. User Consent
	‚Ä¢	Before accessing browsing/YouTube history, display a consent popup:
‚ÄúWould you like to receive personalized Islamic recommendations based on your browsing activity? We‚Äôll only use this for religious content suggestions.‚Äù
	‚Ä¢	Allow ‚ÄúAccept‚Äù or ‚ÄúDecline‚Äù.
	‚Ä¢	If declined ‚Üí show general recommendations.

‚∏ª

3. Dynamic Hadith Library
	‚Ä¢	All Hadith Books (e.g., Sahih Bukhari, Muslim, Tirmidhi, Abu Dawood, etc.)
	‚Ä¢	Each book should have:
	‚Ä¢	Chapters ‚Üí Subtopics ‚Üí Individual Hadiths
	‚Ä¢	Search filter (book name, topic, narrator, keywords)
	‚Ä¢	Language options: Urdu, Hindi, English
	‚Ä¢	Audio playback (for multiple scholars)
	‚Ä¢	Fix issue: currently, only two scholars‚Äô audios work, others show names but no audio ‚Äî this must be tested and fixed.

‚∏ª

4. Dua & Ruqyah Section
	‚Ä¢	Create dedicated sections:
	‚Ä¢	Daily Duas (Morning / Evening)
	‚Ä¢	Weekly / Monthly Duas
	‚Ä¢	Occasional Duas (Ramadan, Hajj, Exams, Illness, etc.)
	‚Ä¢	Dua-e-Manzil
	‚Ä¢	Ruqyah Shariah
	‚Ä¢	Include Arabic text + Translation + Audio.
	‚Ä¢	Add category filters for easy browsing.

‚∏ª

5. Enriched Topic Pages

Each Islamic topic (e.g., Riba, Patience, Charity, Prayer) should include:
	‚Ä¢	Related Quran verses
	‚Ä¢	Related Hadiths
	‚Ä¢	Related Scholars‚Äô explanations or lectures
	‚Ä¢	Related Duas
	‚Ä¢	Subtopics for in-depth navigation
	‚Ä¢	Dynamic filtering by:
	‚Ä¢	Source (Quran / Hadith / Scholar)
	‚Ä¢	Language
	‚Ä¢	Topic type (Fiqh, Aqeedah, History, etc.)

‚∏ª

6. Testing & Final Validation
	‚Ä¢	Test all audio links and ensure every scholar‚Äôs clip loads correctly.
	‚Ä¢	Validate search filters and dynamic content loading.
	‚Ä¢	Confirm consent flow works as intended.
	‚Ä¢	Confirm all dynamic recommendations appear properly after consent.

‚∏ª

üõ†Ô∏è Technical Notes
	‚Ä¢	Use a central database to store all Quran, Hadith, and Dua data.
	‚Ä¢	Ensure search and filters are dynamic (e.g., by book, topic, keyword, scholar).
	‚Ä¢	Support multi-language translations (Urdu, English, Hindi).
	‚Ä¢	Use AI-based tagging or keyword extraction for recommendation mapping.
	‚Ä¢	All user data/browsing info must remain private and local or anonymized.

‚∏ª

‚úÖ Task List Summary

#	Task	Status
1	Implement consent-based browsing recommendation	‚è≥ Pending
2	Build dynamic Hadith library with chapter filtering	‚è≥ Pending
3	Fix missing scholar audios	‚è≥ Pending
4	Create Dua, Ruqyah, and Manzil pages	‚è≥ Pending
5	Add daily/weekly/morning/evening/occasional dua filters	‚è≥ Pending
6	Enrich topic pages (Riba, Sabr, etc.) with Quran, Hadith, Duas	‚è≥ Pending
7	Add AI-based recommendation logic	‚è≥ Pending
8	Full system testing (audio, filters, consent flow)	‚è≥ Pending


‚∏ª

Would you like me to also prepare a developer architecture document (showing database structure, API design, and front-end flow** for this)? That would make it easier for your devs to implement it correctly.